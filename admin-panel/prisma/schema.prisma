generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin_users {
  id            BigInt        @id @default(autoincrement())
  email         String        @unique(map: "email") @db.VarChar(255)
  password_hash String?       @db.VarChar(255)
  cognito_id    String?       @unique(map: "cognito_id") @db.VarChar(255) // AWS Cognito User ID
  dept_id       BigInt
  role_id       BigInt
  is_active     Boolean       @default(true)
  created_at    DateTime?     @default(now()) @db.DateTime(0)
  updated_at    DateTime?     @default(now()) @db.DateTime(0)
  departments   departments   @relation(fields: [dept_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_dept")
  roles         roles         @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_role")
  audit_logs    audit_logs[]
  newsletters   newsletters[]
  recruits      recruits[]

  @@index([dept_id], map: "idx_admin_dept")
  @@index([role_id], map: "idx_admin_role")
  @@index([cognito_id], map: "idx_cognito_id")
}

model audit_logs {
  id          BigInt            @id @default(autoincrement())
  user_id     BigInt?
  entity      String            @db.VarChar(50)
  entity_id   BigInt
  action      audit_logs_action
  changes     Json?
  created_at  DateTime?         @default(now()) @db.DateTime(0)
  admin_users admin_users?      @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "fk_audit_user")

  @@index([entity, entity_id], map: "idx_audit_entity")
  @@index([user_id], map: "idx_audit_user")
}

model departments {
  id          BigInt        @id @default(autoincrement())
  code        String        @unique(map: "code") @db.VarChar(50)
  name        String        @db.VarChar(100)
  admin_users admin_users[]
}

model newsletters {
  id               BigInt             @id @default(autoincrement())
  title            String             @db.VarChar(255)
  body_html        String             @db.MediumText
  thumbnail_image  String?            @db.VarChar(500)
  body_image       String?            @db.VarChar(500)
  subtitle         String?            @db.VarChar(500)
  subtitle_bold    Boolean            @default(false)
  status           newsletters_status @default(draft)
  display_order    Int?               @default(0)
  author_id        BigInt
  published_at     DateTime?          @db.DateTime(0)
  created_at       DateTime?          @default(now()) @db.DateTime(0)
  updated_at       DateTime?          @default(now()) @db.DateTime(0)
  admin_users      admin_users        @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_news_author")

  @@index([author_id], map: "idx_news_author")
  @@index([status, published_at], map: "idx_news_status_pub")
  @@index([display_order], map: "idx_news_display_order")
}

model recruits {
  id              BigInt                   @id @default(autoincrement())
  title           String                   @db.VarChar(255)
  description     String                   @db.MediumText
  location        String?                  @db.VarChar(100)
  employment_type recruits_employment_type @default(fulltime)
  status          recruits_status          @default(draft)
  editor_id       BigInt
  posted_at       DateTime?                @db.DateTime(0)
  created_at      DateTime?                @default(now()) @db.DateTime(0)
  updated_at      DateTime?                @default(now()) @db.DateTime(0)
  admin_users     admin_users              @relation(fields: [editor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recruit_editor")

  @@index([editor_id], map: "idx_recruit_editor")
  @@index([status, posted_at], map: "idx_recruit_status_post")
}

model roles {
  id          BigInt        @id @default(autoincrement())
  name        String        @unique(map: "name") @db.VarChar(50)
  level       Int
  admin_users admin_users[]
}



enum newsletters_status {
  draft
  published
  archived
}

enum recruits_employment_type {
  fulltime
  contract
  intern
  parttime
}

enum audit_logs_action {
  create
  update
  delete
  publish
  close
}

enum recruits_status {
  draft
  open
  closed
  archived
}


// DMS 용 model은 아래쪽에 등록 예정입니다. 

model dms_ip_access_control {
  id          Int                       @id @default(autoincrement())
  ip_address  String                    @db.VarChar(45) // IPv4 또는 IPv6 주소 (예: "123.456.1.0/24", "123.456.7.890")
  subnet_mask Int?                      // 서브넷 마스크 (예: 24, 16, 8) - CIDR 표기법에서 / 뒤의 숫자
  is_active   Boolean                   @default(true) // 활성화/비활성화 상태
  description String?                   @db.VarChar(100) // IP 설명 (예: "본사 네트워크", "개발팀 IP")
  created_by  Int? // 생성자 ID (DMS 관리자)
  created_at  DateTime                  @default(now()) @db.DateTime(0)
  updated_at  DateTime                  @default(now()) @db.DateTime(0) @updatedAt

  @@index([is_active], map: "idx_dms_ip_active")
  @@index([ip_address], map: "idx_dms_ip_address")
}

model dms_admin_users {
  id             Int       @id @default(autoincrement())
  email          String    @unique @db.VarChar(255) // Concentrix 이메일 주소
  password_hash  String    @db.VarChar(255)
  employee_id    Int?
  is_active      Boolean   @default(true) // 계정 활성화 상태
  last_login_at  DateTime? @db.DateTime(0) // 마지막 로그인 시간
  created_at     DateTime  @default(now()) @db.DateTime(0)
  updated_at     DateTime  @default(now()) @db.DateTime(0) @updatedAt

  @@index([email], map: "idx_dms_admin_email")
  @@index([employee_id], map: "idx_dms_admin_employee")
  @@index([is_active], map: "idx_dms_admin_active")
}
